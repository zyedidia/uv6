local knit = require("knit")

function makedep(dc, s)
    return sel(dc == "gdc", f"-M -MF $s", f"-makedeps=$s")
end

function cmodel(dc, s)
    return sel(dc == "gdc", f"-mcmodel=$s", f"-code-model=$s")
end

function version(dc, s)
    return sel(dc == "gdc", f"-fversion=$s", f"-d-version=$s")
end

local pagesize = knit.shell("getconf PAGESIZE")

local _, uconf = pcall(include, "conf.knit")

local arch = cli.arch or uconf.arch or "arm64"
local darch = string.upper(arch)
local unified = cli.unified or uconf.unified or false

local dsrc = knit.join(
    knit.glob("*.d"),
    knit.glob(f"arch/$arch/*.d"),
    knit.glob("core/*.d"),
    knit.glob("alloc/*.d"),
    knit.glob("lfi/*.d"),
    knit.glob("buddy/*.d"),
    knit.glob("cwalk/*.d")
)

local csrc = knit.join(
    knit.glob("buddy/*.c"),
    knit.glob("cwalk/*.c")
)

local ssrc = knit.join(
    knit.glob("*.S")
)

local obj = knit.join(knit.extrepl(ssrc, ".S", ".o"), knit.extrepl(csrc, ".c", ".o"))
if unified then
    obj = knit.join({"unified.o"}, obj)
else
    obj = knit.join(knit.extrepl(dsrc, ".d", ".o"), obj)
end
obj = knit.prefix(obj, ".")

local dc = cli.dc or "ldc2"
local o = sel(dc == "gdc", "o", "of")

local platform = {
    arm64 := -mattr=-fp-armv8,-neon
}

local dflags = {
    gdc := -O2 -Wall -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti -fversion=$arch -ftransition=tls -ffunction-sections -fdata-sections -fno-pic -g
    ldc2 := -O2 -betterC -function-sections -data-sections -relocation-model=static -g
}

local flags = {
    dc = dflags[dc],
    ld := -Wl,--gc-sections -fno-pic -L../lfi/liblfi -llfi -llfiverify
}

if pagesize == "16384" then
    flags.dc = flags.dc .. " " .. version(dc, "page16k")
end

return b{
    $ uv6: $obj
        gcc $input -o $output -static $(flags.ld)

    $ .unified.o: $dsrc
        $(dc) -c $input -$o $output $(flags.dc)

    $ .%.o:D[.%.dep]: %.d
        $(dc) $(makedep(dc, dep)) -c $input -$o $output $(flags.dc)
    $ .%.o: %.S
        gcc -c $input -o $output -D$darch
    $ .%.o: %.c
        gcc -O2 -Wall -c $input -o $output -I.
}
